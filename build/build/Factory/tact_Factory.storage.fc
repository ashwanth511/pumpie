;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice $to, int $value, int $mode, cell $code, cell $data, cell $body) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

builder $Deploy$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2490013878, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $Deploy$_store_cell((int) v) inline {
    return $Deploy$_store(begin_cell(), v).end_cell();
}

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

((int)) $Deploy$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: TransferOwnership
;; Header: 0x70373fea
;; TLB: transfer_ownership#70373fea newOwner:address = TransferOwnership
;;

builder $TransferOwnership$_store(builder build_0, (slice) v) inline {
    var (v'newOwner) = v;
    build_0 = store_uint(build_0, 1882669034, 32);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $TransferOwnership$_store_cell((slice) v) inline {
    return $TransferOwnership$_store(begin_cell(), v).end_cell();
}

((slice)) $TransferOwnership$_constructor_newOwner(slice $newOwner) inline {
    return ($newOwner);
}

;;
;; Type: DeployPool
;; Header: 0xf5dce9b2
;; TLB: deploy_pool#f5dce9b2 tokenAddress:address = DeployPool
;;

(slice, ((slice))) $DeployPool$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4124895666);
    var v'tokenAddress = sc_0~__tact_load_address();
    return (sc_0, (v'tokenAddress));
}

;;
;; Type: Pool
;;

builder $Pool$init$_store(builder build_0, (slice) v) inline {
    var (v'token) = v;
    build_0 = __tact_store_address(build_0, v'token);
    return build_0;
}

(cell, cell) $Pool$_init_child(cell sys', slice $token) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Pool
    cell mine = __tact_dict_get_code(source, 29791);
    contracts = __tact_dict_set_code(contracts, 29791, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Pool$init$_store(b, ($token));
    return (mine, b.end_cell());
}

;;
;; Type: Factory
;;

builder $Factory$_store(builder build_0, (slice, cell, int) v) inline {
    var (v'owner, v'pools, v'totalPools) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'pools);
    build_0 = build_0.store_uint(v'totalPools, 32);
    return build_0;
}

(slice, ((slice, cell, int))) $Factory$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'pools = sc_0~load_dict();
    var v'totalPools = sc_0~load_uint(32);
    return (sc_0, (v'owner, v'pools, v'totalPools));
}

(slice, cell, int) $Factory$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Factory$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Factory$_contract_init();
    }
}

() $Factory$_contract_store((slice, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Factory$_store(b, v);
    set_data(b.end_cell());
}