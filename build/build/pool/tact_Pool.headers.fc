;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $JettonMint$_store
builder $JettonMint$_store(builder build_0, (slice, slice, int, cell, int, slice) v) inline_ref;

;; $JettonMint$_store_cell
cell $JettonMint$_store_cell((slice, slice, int, cell, int, slice) v) inline;

;; $JettonData$_store
builder $JettonData$_store(builder build_0, (int, int, slice, cell, cell) v) inline;

;; $JettonData$_load
(slice, ((int, int, slice, cell, cell))) $JettonData$_load(slice sc_0) inline;

;; $JettonBurn$_store
builder $JettonBurn$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $JettonBurn$_store_cell
cell $JettonBurn$_store_cell((int, int, slice, cell) v) inline;

;; $JettonBurnNotification$_load
(slice, ((int, int, slice, slice))) $JettonBurnNotification$_load(slice sc_0) inline;

;; $BuyTokens$_load
(slice, (tuple)) $BuyTokens$_load(slice sc_0) inline;

;; $SellTokens$_load
(slice, ((int, slice))) $SellTokens$_load(slice sc_0) inline;

;; $GetJettonData$_store
builder $GetJettonData$_store(builder build_0, (int) v) inline;

;; $GetJettonData$_store_cell
cell $GetJettonData$_store_cell((int) v) inline;

;; $GetJettonDataResponse$_load
(slice, ((int, (int, int, slice, cell, cell)))) $GetJettonDataResponse$_load(slice sc_0) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (slice, slice, (int, int, slice, cell, cell)) v) inline;

;; $Pool$_load
(slice, ((slice, slice, (int, int, slice, cell, cell)))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $JettonData$_to_external
(int, int, slice, cell, cell) $JettonData$_to_external(((int, int, slice, cell, cell)) v) inline;

;; $Pool$init$_load
(slice, ((slice))) $Pool$init$_load(slice sc_0) inline;

;; $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code
((int, int, slice, cell, cell)) $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code(int $total_supply, int $mintable, slice $admin_address, cell $jetton_content, cell $jetton_wallet_code) inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Pool$_contract_init
(slice, slice, (int, int, slice, cell, cell)) $Pool$_contract_init(slice $token) impure inline_ref;

;; $Pool$_contract_load
(slice, slice, (int, int, slice, cell, cell)) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((slice, slice, (int, int, slice, cell, cell)) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Pool$_fun_exp
((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_exp((slice, slice, (int, int, slice, cell, cell)) $self, int $x) impure inline_ref;

;; $Pool$_fun_calculateCost
((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_calculateCost((slice, slice, (int, int, slice, cell, cell)) $self, int $currentSupply, int $tokensToBuy) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $GetJettonData$_constructor_query_id
((int)) $GetJettonData$_constructor_query_id(int $query_id) inline;

;; $Pool$_fun_getTokenData
((slice, slice, (int, int, slice, cell, cell)), (int, int, slice, cell, cell)) $Pool$_fun_getTokenData((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref;

;; $Pool$_fun_getTokenSupply
((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_getTokenSupply((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref;

;; $Pool$_fun_getCurrentPrice
((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_getCurrentPrice((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref;

;; $Pool$_fun_forward
((slice, slice, (int, int, slice, cell, cell)), ()) $Pool$_fun_forward((slice, slice, (int, int, slice, cell, cell)) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_notify
((slice, slice, (int, int, slice, cell, cell)), ()) $Pool$_fun_notify((slice, slice, (int, int, slice, cell, cell)) $self, cell $body) impure inline;

;; $Pool$_fun_owner
((slice, slice, (int, int, slice, cell, cell)), slice) $Pool$_fun_owner((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref;

;; $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload
((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice $origin, slice $receiver, int $amount, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline;

;; $JettonBurn$_constructor_query_id_amount_custom_payload_response_destination
((int, int, slice, cell)) $JettonBurn$_constructor_query_id_amount_custom_payload_response_destination(int $query_id, int $amount, cell $custom_payload, slice $response_destination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
