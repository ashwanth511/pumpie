#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.constants.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(slice, slice, (int, int, slice, cell, cell)) $Pool$_contract_init(slice $token) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = (null(), null(), null());
    $self'owner = __tact_context_get_sender();
    $self'tokenAddress = $token;
    ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code) = $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code(1000000000, true, $self'owner, $global_emptyCell(), $global_emptyCell());
    return ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code));
}

((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_exp((slice, slice, (int, int, slice, cell, cell)) $self, int $x) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = $self;
    int $sum = 1000000000;
    int $term = 1000000000;
    int $xPower = $x;
    int $iter = 1;
    repeat (20) {
        $term = (($term * $xPower) / ($iter * 1000000000));
        $sum = ($sum + $term);
        $iter = ($iter + 1);
        if (($term < 1)) {
            var $fresh$ret_32 = $sum;
            return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_32);
        }
    }
    var $fresh$ret_33 = $sum;
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_33);
}

((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_calculateCost((slice, slice, (int, int, slice, cell, cell)) $self, int $currentSupply, int $tokensToBuy) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = $self;
    int $exponent1 = ((8000000000000000 * ($currentSupply + $tokensToBuy)) / 1000000000);
    int $exponent2 = ((8000000000000000 * $currentSupply) / 1000000000);
    int $exp1 = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_exp($exponent1);
    int $exp2 = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_exp($exponent2);
    var $fresh$ret_34 = ((30000000000000000000000 * ($exp1 - $exp2)) / 8000000000000000);
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_34);
}

((slice, slice, (int, int, slice, cell, cell)), (int, int, slice, cell, cell)) $Pool$_fun_getTokenData((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = $self;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'tokenAddress, 100000000, 64, $GetJettonData$_store_cell($GetJettonData$_constructor_query_id($global_now()))));
    var $fresh$ret_35 = ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code);
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_35);
}

((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_getTokenSupply((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = $self;
    var ($data'total_supply, $data'mintable, $data'admin_address, $data'jetton_content, $data'jetton_wallet_code) = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_getTokenData();
    var $fresh$ret_37 = ($data'total_supply + 100000000);
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_37);
}

((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_fun_getCurrentPrice((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = $self;
    int $currentSupply = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_getTokenSupply();
    var $fresh$ret_36 = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_calculateCost($currentSupply, 1000000000);
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_36);
}

((slice, slice, (int, int, slice, cell, cell)), slice) $Pool$_fun_owner((slice, slice, (int, int, slice, cell, cell)) $self) impure inline_ref {
    var (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))) = $self;
    var $fresh$ret_38 = $self'owner;
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), $fresh$ret_38);
}

;;
;; Receivers of a Contract Pool
;;

(((slice, slice, (int, int, slice, cell, cell))), ()) $Pool$_internal_binary_BuyTokens((slice, slice, (int, int, slice, cell, cell)) $self, tuple $msg) impure inline {
    var ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)) = $self;
    var $msg = $msg;
    int $amount = $Context$_get_value(__tact_context_get());
    throw_unless(56753, ($amount > 200000000));
    int $currentSupply = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_getTokenSupply();
    int $availableTon = ($amount - 150000000);
    int $cost = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_calculateCost($currentSupply, 1000000000);
    int $tokensToMint = (($availableTon * 1000000000) / $cost);
    throw_unless(57646, ($tokensToMint > 0));
    var ($data'total_supply, $data'mintable, $data'admin_address, $data'jetton_content, $data'jetton_wallet_code) = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_getTokenData();
    throw_unless(8792, $data'mintable);
    $global_send($SendParameters$_constructor_to_value_mode_body($self'tokenAddress, 100000000, 1, $JettonMint$_store_cell($JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload($global_myAddress(), __tact_context_get_sender(), $tokensToMint, null(), 50000000, $global_emptySlice()))));
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), ());
}

(((slice, slice, (int, int, slice, cell, cell))), ()) $Pool$_internal_binary_SellTokens((slice, slice, (int, int, slice, cell, cell)) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)) = $self;
    var ($msg'tokenAmount, $msg'from) = $msg;
    int $currentSupply = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_getTokenSupply();
    int $newSupply = ($currentSupply - $msg'tokenAmount);
    int $returnAmount = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_calculateCost($newSupply, $msg'tokenAmount);
    throw_unless(32672, ($returnAmount > 100000000));
    $global_send($SendParameters$_constructor_to_value_mode_body($self'tokenAddress, 100000000, 1, $JettonBurn$_store_cell($JettonBurn$_constructor_query_id_amount_custom_payload_response_destination(0, $msg'tokenAmount, null(), $global_myAddress()))));
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), ());
}

(((slice, slice, (int, int, slice, cell, cell))), ()) $Pool$_internal_binary_JettonBurnNotification((slice, slice, (int, int, slice, cell, cell)) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination) = $msg;
    throw_unless(3820, ( __tact_slice_eq_bits($self'tokenAddress, __tact_context_get_sender()) ));
    int $currentSupply = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_getTokenSupply();
    int $returnAmount = ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_calculateCost($currentSupply, $msg'amount);
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'sender, ($returnAmount - 100000000), 1, __gen_cell_comment_f6615e045c0691109b8e7f3d97792b595c7c7567287444db4d183124c573fc4e()));
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), ());
}

(((slice, slice, (int, int, slice, cell, cell))), ()) $Pool$_internal_binary_GetJettonDataResponse((slice, slice, (int, int, slice, cell, cell)) $self, (int, (int, int, slice, cell, cell)) $msg) impure inline {
    var ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)) = $self;
    var ($msg'query_id, ($msg'data'total_supply, $msg'data'mintable, $msg'data'admin_address, $msg'data'jetton_content, $msg'data'jetton_wallet_code)) = $msg;
    throw_unless(38640, ( __tact_slice_eq_bits($self'tokenAddress, __tact_context_get_sender()) ));
    ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code) = ($msg'data'total_supply, $msg'data'mintable, $msg'data'admin_address, $msg'data'jetton_content, $msg'data'jetton_wallet_code);
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), ());
}

(((slice, slice, (int, int, slice, cell, cell))), ()) $Pool$_internal_binary_Deploy((slice, slice, (int, int, slice, cell, cell)) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code))~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'tokenAddress, ($self'tokenData'total_supply, $self'tokenData'mintable, $self'tokenData'admin_address, $self'tokenData'jetton_content, $self'tokenData'jetton_wallet_code)), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %getTokenData() method_id(125048) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_getTokenData();
    return $JettonData$_to_external(res);
}

_ %getCurrentPrice() method_id(116589) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_getCurrentPrice();
    return res;
}

_ %getTokenSupply() method_id(75334) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_getTokenSupply();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((slice, slice, (int, int, slice, cell, cell)), int) $Pool$_contract_router_internal((slice, slice, (int, int, slice, cell, cell)) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive BuyTokens message
    if (op == 1461950307) {
        var msg = in_msg~$BuyTokens$_load();
        self~$Pool$_internal_binary_BuyTokens(msg);
        return (self, true);
    }
    
    ;; Receive SellTokens message
    if (op == 4185553464) {
        var msg = in_msg~$SellTokens$_load();
        self~$Pool$_internal_binary_SellTokens(msg);
        return (self, true);
    }
    
    ;; Receive JettonBurnNotification message
    if (op == 0x7bdd97de) {
        var msg = in_msg~$JettonBurnNotification$_load();
        self~$Pool$_internal_binary_JettonBurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive GetJettonDataResponse message
    if (op == 2500728424) {
        var msg = in_msg~$GetJettonDataResponse$_load();
        self~$Pool$_internal_binary_GetJettonDataResponse(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
