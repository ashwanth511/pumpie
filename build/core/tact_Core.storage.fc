;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice $to, int $value, int $mode, cell $code, cell $data, cell $body) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: DeployJetton
;; Header: 0x78964f18
;; TLB: deploy_jetton#78964f18 jettonContent:^cell initialSupply:coins = DeployJetton
;;

builder $DeployJetton$_store(builder build_0, (cell, int) v) inline {
    var (v'jettonContent, v'initialSupply) = v;
    build_0 = store_uint(build_0, 2023116568, 32);
    build_0 = build_0.store_ref(v'jettonContent);
    build_0 = build_0.store_coins(v'initialSupply);
    return build_0;
}

cell $DeployJetton$_store_cell((cell, int) v) inline {
    return $DeployJetton$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $DeployJetton$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2023116568);
    var v'jettonContent = sc_0~load_ref();
    var v'initialSupply = sc_0~load_coins();
    return (sc_0, (v'jettonContent, v'initialSupply));
}

((cell, int)) $DeployJetton$_constructor_jettonContent_initialSupply(cell $jettonContent, int $initialSupply) inline {
    return ($jettonContent, $initialSupply);
}

;;
;; Type: Jetton
;;

builder $Jetton$init$_store(builder build_0, (slice, cell, int) v) inline {
    var (v'owner, v'content, v'initial_supply) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'content);
    build_0 = build_0.store_int(v'initial_supply, 257);
    return build_0;
}

(cell, cell) $Jetton$_init_child(cell sys', slice $owner, cell $content, int $initial_supply) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Jetton
    cell mine = __tact_dict_get_code(source, 52393);
    contracts = __tact_dict_set_code(contracts, 52393, mine);
    
    ;; Contract Code: JettonWalletImp
    cell code_31268 = __tact_dict_get_code(source, 31268);
    contracts = __tact_dict_set_code(contracts, 31268, code_31268);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Jetton$init$_store(b, ($owner, $content, $initial_supply));
    return (mine, b.end_cell());
}

;;
;; Type: Core
;;

builder $Core$_store(builder build_0, (slice, int, cell) v) inline {
    var (v'owner, v'totalChildContracts, v'tokenAddresses) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'totalChildContracts, 257);
    build_0 = build_0.store_dict(v'tokenAddresses);
    return build_0;
}

(slice, ((slice, int, cell))) $Core$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'totalChildContracts = sc_0~load_int(257);
    var v'tokenAddresses = sc_0~load_dict();
    return (sc_0, (v'owner, v'totalChildContracts, v'tokenAddresses));
}

(slice, int, cell) $Core$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Core$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Core$_contract_init();
    }
}

() $Core$_contract_store((slice, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Core$_store(b, v);
    set_data(b.end_cell());
}